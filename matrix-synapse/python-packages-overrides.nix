# Generated by pip2nix 0.7.0.dev1
# Adjust to your needs, e.g. to provide C libraries.

{ pkgs, basePythonPackages }:

self: super: {

  # Example adjustment for lxml: It needs a few C libraries
  #
  # lxml = super.lxml.override (attrs: {
  #   buildInputs = with self; [
  #     pkgs.libxml2
  #     pkgs.libxslt
  #   ];
  # });

  # Common needs

  # setuptools - avoid that we end up in a recursion
  inherit (basePythonPackages) setuptools;

  cffi = super.cffi.override (attrs: {
    propagatedBuildInputs = attrs.propagatedBuildInputs ++ [
      pkgs.libffi
    ];
  });

  cryptography = super.cryptography.override (attrs: {
    buildInputs = attrs.buildInputs ++ [
      pkgs.openssl
    ] ++
    pkgs.lib.optional pkgs.stdenv.isDarwin pkgs.darwin.apple_sdk.frameworks.Security;
    propagatedBuildInputs = attrs.propagatedBuildInputs ++ (with self; [
      # Building with Python 2
      enum34
      ipaddress
    ]);

  });

  pillow = super.pillow.override (attrs: {
    # Disable imagefont tests, because they don't work well with infinality:
    # https://github.com/python-pillow/Pillow/issues/1259
    postPatch = ''
      rm Tests/test_imagefont.py
    '';

    buildInputs = with pkgs; [
      freetype libjpeg zlib libtiff libwebp tcl lcms2 ]
      ++ stdenv.lib.optionals (super.isPyPy) [ tk libX11 ];

    # NOTE: we use LCMS_ROOT as WEBP root since there is not other setting for webp.
    preConfigure = let
      libinclude' = pkg: ''"${pkg.out}/lib", "${pkg.out}/include"'';
      libinclude = pkg: ''"${pkg.out}/lib", "${pkg.dev}/include"'';
    in with pkgs; ''
      sed -i "setup.py" \
          -e 's|^FREETYPE_ROOT =.*$|FREETYPE_ROOT = ${libinclude freetype}|g ;
              s|^JPEG_ROOT =.*$|JPEG_ROOT = ${libinclude libjpeg}|g ;
              s|^ZLIB_ROOT =.*$|ZLIB_ROOT = ${libinclude zlib}|g ;
              s|^LCMS_ROOT =.*$|LCMS_ROOT = ${libinclude lcms2}|g ;
              s|^TIFF_ROOT =.*$|TIFF_ROOT = ${libinclude libtiff}|g ;
              s|^TCL_ROOT=.*$|TCL_ROOT = ${libinclude' tcl}|g ;'
      export LDFLAGS="-L${libwebp}/lib"
      export CFLAGS="-I${libwebp}/include"
    ''
    # Remove impurities
    + stdenv.lib.optionalString stdenv.isDarwin ''
      substituteInPlace setup.py \
        --replace '"/Library/Frameworks",' "" \
        --replace '"/System/Library/Frameworks"' ""
    '';
  });

  pynacl = super.pynacl.override (attrs: {
    propagatedBuildInputs = attrs.propagatedBuildInputs ++
      [ pkgs.libsodium ];
  });

  psutil = super.psutil.override (attrs: {
    buildInputs = attrs.buildInputs ++
      pkgs.lib.optional pkgs.stdenv.isDarwin pkgs.darwin.IOKit;
  });

}
